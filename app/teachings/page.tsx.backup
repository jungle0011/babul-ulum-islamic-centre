"use client";
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import LanguageToggle from '@/components/LanguageToggle';
import { LanguageProvider, useLanguage } from '@/components/LanguageProvider';
import { motion } from 'framer-motion';

interface Comment {
  _id?: string;
  name: string;
  email?: string;
  content: string;
  date: string;
  userId: string;
}

interface Teaching {
  _id: string;
  title: string;
  content: string;
  date: string;
  imageUrl?: string;
  type?: string;
  tags?: string[];
  author?: string;
  authorAvatar?: string;
  pinned?: boolean;
  comments?: Comment[];
  title_ar?: string;
  content_ar?: string;
  author_ar?: string;
}

export default function TeachingsPage() {
  return (
    <LanguageProvider>
      <TeachingsPageContent />
    </LanguageProvider>
  );
}

function TeachingsPageContent() {
  const { t } = useTranslation();
  const { language } = useLanguage();
  const [teachings, setTeachings] = useState<Teaching[]>([]);
  const [search, setSearch] = useState('');
  const [selectedTag, setSelectedTag] = useState<string | null>(null);
  const [showFavorites, setShowFavorites] = useState(false);
  const [favorites, setFavorites] = useState<string[]>([]);
  const [modalTeaching, setModalTeaching] = useState<Teaching | null>(null);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(1);
  const [isAdmin, setIsAdmin] = useState(false);
  const [copySuccess, setCopySuccess] = useState('');
  const [commentForm, setCommentForm] = useState({ name: '', email: '', content: '' });
  const [commentLoading, setCommentLoading] = useState(false);
  const [commentSuccess, setCommentSuccess] = useState('');
  const [currentUserComments, setCurrentUserComments] = useState<Set<string>>(new Set());
  const [commentsExpanded, setCommentsExpanded] = useState(false);
  const perPage = 6;

  // Check admin status
  useEffect(() => {
    const checkAdmin = async () => {
      try {
        const res = await fetch('/api/admin/check');
        if (res.ok) {
          const data = await res.json();
          setIsAdmin(data.isAdmin);
        }
      } catch (error) {
        console.log('Not admin');
        setIsAdmin(false);
      }
    };
    checkAdmin();
  }, []);

  // Load favorites from localStorage
  useEffect(() => {
    const savedFavorites = localStorage.getItem('babul_favorites');
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites));
    }
  }, []);

  // Save favorites to localStorage
  useEffect(() => {
    localStorage.setItem('babul_favorites', JSON.stringify(favorites));
  }, [favorites]);

  useEffect(() => {
    async function fetchTeachings() {
      try {
        const res = await fetch('/api/articles');
        const data = await res.json();
        setTeachings(data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching teachings:', error);
        setLoading(false);
      }
    }
    fetchTeachings();
  }, []);

  function getUniqueTags(teachings: Teaching[]): string[] {
    const tags = new Set<string>();
    teachings.forEach((t: Teaching) => {
      if (t.tags) t.tags.forEach((tag: string) => tags.add(tag));
      if (t.type) tags.add(t.type);
    });
    return Array.from(tags);
  }

  const tags = getUniqueTags(teachings);
  const featured = teachings.filter((t) => t.pinned);
  const regular = teachings.filter((t) => !t.pinned);

  function filterTeachings(list: Teaching[]) {
    return list.filter((t) => {
      const matchesSearch =
        t.title.toLowerCase().includes(search.toLowerCase()) ||
        t.content.toLowerCase().includes(search.toLowerCase()) ||
        (t.author && t.author.toLowerCase().includes(search.toLowerCase()));
      const matchesTag = selectedTag
        ? (t.tags && t.tags.includes(selectedTag)) || t.type === selectedTag
        : true;
      const matchesFavorites = showFavorites ? favorites.includes(t._id) : true;
      return matchesSearch && matchesTag && matchesFavorites;
    });
  }

  const filteredFeatured = filterTeachings(featured);
  const filteredRegular = filterTeachings(regular);
  const paginatedRegular = filteredRegular.slice((page - 1) * perPage, page * perPage);
  const totalPages = Math.ceil(filteredRegular.length / perPage);

  const toggleFavorite = (teachingId: string) => {
    setFavorites(prev => 
      prev.includes(teachingId) 
        ? prev.filter(id => id !== teachingId)
        : [...prev, teachingId]
    );
  };

  const handlePinToggle = async (teachingId: string, currentPinned: boolean) => {
    try {
      const res = await fetch(`/api/articles/${teachingId}/pin`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ pinned: !currentPinned })
      });
      
      if (res.ok) {
        setTeachings(prev => prev.map(t => 
          t._id === teachingId ? { ...t, pinned: !currentPinned } : t
        ));
        setCopySuccess(currentPinned ? t('admin.unpinned') : t('admin.pinned'));
        setTimeout(() => setCopySuccess(''), 2000);
      }
    } catch (error) {
      console.error('Error toggling pin:', error);
    }
  };

  const handleDeleteTeaching = async (teachingId: string) => {
    if (!confirm(t('admin.deleteConfirm'))) return;
    
    try {
      const res = await fetch(`/api/articles/${teachingId}`, {
        method: 'DELETE'
      });
      
      if (res.ok) {
        setTeachings(prev => prev.filter(t => t._id !== teachingId));
        setCopySuccess(t('admin.deleted'));
        setTimeout(() => setCopySuccess(''), 2000);
      }
    } catch (error) {
      console.error('Error deleting teaching:', error);
    }
  };

  const handleCommentSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!modalTeaching || !commentForm.name || !commentForm.content) return;

    setCommentLoading(true);
    try {
      const res = await fetch(`/api/articles/${modalTeaching._id}/comments`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(commentForm)
      });

      if (res.ok) {
        const data = await res.json();
        setModalTeaching(prev => prev ? {
          ...prev,
          comments: [...(prev.comments || []), data.comment]
        } : null);
        // Track this comment as belonging to the current user
        setCurrentUserComments(prev => new Set(Array.from(prev).concat(data.comment.userId)));
        setCommentForm({ name: '', email: '', content: '' });
        setCommentSuccess(t('comments.posted'));
        setTimeout(() => setCommentSuccess(''), 3000);
      } else if (res.status === 401) {
        setCommentSuccess('Error posting comment. Please try again.');
        setTimeout(() => setCommentSuccess(''), 3000);
      }
    } catch (error) {
      console.error('Error posting comment:', error);
      setCommentSuccess(t('comments.error'));
      setTimeout(() => setCommentSuccess(''), 3000);
    }
    setCommentLoading(false);
  };

  const handleDeleteComment = async (commentId: string) => {
    if (!modalTeaching || !confirm(t('comments.deleteConfirm'))) return;

    try {
      const res = await fetch(`/api/articles/${modalTeaching._id}/comments/${commentId}`, {
        method: 'DELETE'
      });

      if (res.ok) {
        setModalTeaching(prev => prev ? {
          ...prev,
          comments: prev.comments?.filter(c => c.userId !== commentId) || []
        } : null);
        // Remove from tracked user comments
        setCurrentUserComments(prev => {
          const newSet = new Set(Array.from(prev));
          newSet.delete(commentId);
          return newSet;
        });
        setCopySuccess(t('comments.deleted'));
        setTimeout(() => setCopySuccess(''), 2000);
      } else if (res.status === 401) {
        setCopySuccess('You can only delete your own comments');
        setTimeout(() => setCopySuccess(''), 2000);
      }
    } catch (error) {
      console.error('Error deleting comment:', error);
    }
  };

  const fetchComments = async (teachingId: string) => {
    try {
      const res = await fetch(`/api/articles/${teachingId}/comments`);
      if (res.ok) {
        const data = await res.json();
        setModalTeaching(prev => prev ? {
          ...prev,
          comments: data.comments || []
        } : null);
      }
    } catch (error) {
      console.error('Error fetching comments:', error);
    }
  };

  const handleOpenModal = (teaching: Teaching) => {
    setModalTeaching(teaching);
    fetchComments(teaching._id);
  };

  return (
    <div className="min-h-screen relative">
      {/* Background with Islamic pattern */}
      <div className="absolute inset-0 bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 geometric-pattern opacity-95"></div>
      {/* Hero background image */}
      <div className="absolute inset-0 z-0">
        <img
          src="/hero-bg.jpg"
          alt="Islamic Learning Hero Background"
          className="object-cover w-full h-full opacity-60"
        />
        <div className="absolute inset-0 bg-gradient-to-br from-slate-900/80 via-blue-900/70 to-slate-900/90" />
      </div>
      {/* Sticky Filter Bar */}
      <div className="sticky top-0 z-40 bg-black/80 backdrop-blur-sm border-b border-yellow-500/30 shadow-lg">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex flex-wrap gap-3 items-center justify-center">
            <input
              type="text"
              placeholder={t('forum.search.placeholder')}
              value={search}
              onChange={e => { setSearch(e.target.value); setPage(1); }}
              className="px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-yellow-400 shadow-sm min-w-[200px] bg-white/90 backdrop-blur-sm"
            />
            <button
              onClick={() => setShowFavorites(!showFavorites)}
              className={`px-4 py-2 rounded-lg text-sm font-semibold transition ${
                showFavorites 
                  ? 'bg-yellow-400 text-white' 
                  : 'bg-white/20 text-white hover:bg-white/30 border border-white/30'
              }`}
            >
              {showFavorites ? t('favorites.hide') : t('favorites.show')}
            </button>
            {tags.map((tag: string) => (
              <button
                key={tag}
                onClick={() => { setSelectedTag(selectedTag === tag ? null : tag); setPage(1); }}
                className={`px-3 py-1 rounded-full text-xs font-semibold transition ${
                  selectedTag === tag 
                    ? 'bg-yellow-400 text-white' 
                    : 'bg-white/20 text-white hover:bg-white/30 border border-white/30'
                }`}
              >
                {t('tags.' + tag) || tag}
              </button>
            ))}
            {selectedTag && (
              <button 
                onClick={() => setSelectedTag(null)} 
                className="text-xs text-yellow-300 underline hover:text-yellow-100"
              >
                {t('forum.filter.clear')}
              </button>
            )}
          </div>
        </div>
      </div>

      <div className="py-8 px-4 relative z-10">
        <div className="max-w-6xl mx-auto relative">
          {/* Language Toggle */}
          <div className="absolute right-0 top-0 z-20">
            <LanguageToggleButton />
          </div>
          
          <h1 className="text-4xl font-bold mb-8 text-center text-white tracking-tight animate-fade-in">
            {t('forum.title')}
          </h1>

          {/* Featured */}
          {filteredFeatured.length > 0 && (
            <div className="mb-10 animate-fade-in">
              <h2 className="text-2xl font-semibold mb-4 text-yellow-300 flex items-center gap-2">
                <span>{t('forum.featured')}</span>
                <span className="animate-pulse text-yellow-400">★</span>
              </h2>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredFeatured.map((teaching: Teaching) => (
                  <TeachingCard 
                    key={teaching._id} 
                    teaching={teaching} 
                    featured 
                    onReadMore={handleOpenModal}
                    onToggleFavorite={toggleFavorite}
                    onPinToggle={handlePinToggle}
                    onDelete={handleDeleteTeaching}
                    isFavorite={favorites.includes(teaching._id)}
                    isAdmin={isAdmin}
                    language={language}
                  />
                ))}
              </div>
            </div>
          )}

          {/* Masonry Grid */}
          <div className="columns-1 sm:columns-2 lg:columns-3 gap-6 space-y-6 animate-fade-in">
            {paginatedRegular.length > 0 ? paginatedRegular.map((teaching: Teaching) => (
              <TeachingCard 
                key={teaching._id} 
                teaching={teaching} 
                onReadMore={handleOpenModal}
                onToggleFavorite={toggleFavorite}
                onPinToggle={handlePinToggle}
                onDelete={handleDeleteTeaching}
                isFavorite={favorites.includes(teaching._id)}
                isAdmin={isAdmin}
                language={language}
              />
            )) : !loading && (
              <div className="col-span-full w-full flex flex-col items-center justify-center py-16 animate-fade-in">
                <img src="/babul-logo.jpg" alt="No teachings" className="w-24 h-24 mb-4 opacity-60" />
                <p className="text-lg text-white/70 font-semibold text-center">
                  {showFavorites ? t('favorites.empty') : t('forum.noResults')}
                </p>
              </div>
            )}
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex justify-center items-center gap-4 mt-8 animate-fade-in">
              <button
                onClick={() => setPage(page - 1)}
                disabled={page === 1}
                className="px-4 py-2 rounded-lg bg-white/20 text-white font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:bg-white/30 transition border border-white/30"
              >
                {t('forum.pagination.previous')}
              </button>
              <span className="text-white font-bold">
                {t('forum.pagination.page')} {page} {t('forum.pagination.of')} {totalPages}
              </span>
              <button
                onClick={() => setPage(page + 1)}
                disabled={page === totalPages}
                className="px-4 py-2 rounded-lg bg-white/20 text-white font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:bg-white/30 transition border border-white/30"
              >
                {t('forum.pagination.next')}
              </button>
            </div>
          )}
          
          {loading && (
            <div className="text-center py-10 text-white/70 animate-pulse">
              {t('forum.loading')}
            </div>
          )}
        </div>
      </div>

      {/* Read More Modal */}
      {modalTeaching && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 animate-fade-in p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto animate-fade-in-up relative">
            <div className="p-6">
              <button
                onClick={() => setModalTeaching(null)}
                className="absolute top-6 right-6 text-gray-400 hover:text-yellow-500 text-2xl font-bold z-10 bg-white rounded-full w-8 h-8 flex items-center justify-center shadow-sm"
                aria-label="Close"
              >
                ×
              </button>

              {modalTeaching.imageUrl && (
                <img src={modalTeaching.imageUrl} alt={modalTeaching.title} className="w-full h-56 object-cover rounded-lg mb-4" />
              )}

              <div className="flex items-center gap-2 mb-2 flex-wrap">
                {modalTeaching.type && (
                  <span className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-semibold">
                    {t('types.' + modalTeaching.type) || modalTeaching.type}
                  </span>
                )}
                {modalTeaching.tags && modalTeaching.tags.map((tag: string) => (
                  <span key={tag} className="bg-yellow-100 text-yellow-700 px-2 py-1 rounded text-xs font-semibold">
                    {t('tags.' + tag) || tag}
                  </span>
                ))}
                {modalTeaching.pinned && (
                  <span className="bg-yellow-400 text-white px-2 py-1 rounded text-xs font-bold ml-auto">
                    {t('forum.featured')}
                  </span>
                )}
              </div>

              <h3 className="text-2xl font-bold mb-2 text-gray-800">{modalTeaching.title}</h3>
              <div className="text-xs text-gray-400 mb-2">
                {new Date(modalTeaching.date).toLocaleDateString(language)}
              </div>
              <p className="text-gray-700 whitespace-pre-line mb-4">{modalTeaching.content}</p>

              {modalTeaching.author && (
                <div className="flex items-center gap-2 mb-4">
                  {modalTeaching.authorAvatar && (
                    <img src={modalTeaching.authorAvatar} alt={modalTeaching.author} className="w-7 h-7 rounded-full object-cover" />
                  )}
                  <span className="text-xs text-gray-500">{t('by')} {modalTeaching.author}</span>
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex gap-2 mb-6 flex-wrap">
                <button
                  onClick={() => toggleFavorite(modalTeaching._id)}
                  className={`flex items-center gap-1 px-3 py-2 rounded-lg text-sm transition ${
                    favorites.includes(modalTeaching._id)
                      ? 'bg-yellow-400 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                  </svg>
                  {favorites.includes(modalTeaching._id) ? t('favorites.remove') : t('favorites.add')}
                </button>

                {isAdmin && (
                  <>
                    <button
                      onClick={() => handlePinToggle(modalTeaching._id, !!modalTeaching.pinned)}
                      className="flex items-center gap-1 px-3 py-2 rounded-lg bg-blue-100 text-blue-700 hover:bg-blue-200 transition text-sm"
                    >
                      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z"/>
                      </svg>
                      {modalTeaching.pinned ? t('admin.unpin') : t('admin.pin')}
                    </button>
                    <button
                      onClick={() => handleDeleteTeaching(modalTeaching._id)}
                      className="flex items-center gap-1 px-3 py-2 rounded-lg bg-red-100 text-red-700 hover:bg-red-200 transition text-sm"
                    >
                      <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M6,19c0,1.1,0.9,2,2,2h8c1.1,0,2-0.9,2-2V7H6V19z M19,4h-3.5l-1-1h-5l-1,1H5v2h14V4z"/>
                      </svg>
                      {t('admin.delete')}
                    </button>
                  </>
                )}
              </div>

              {/* Share Buttons */}
              <div className="flex gap-2 mb-6 flex-wrap">
                <button
                  onClick={() => window.open(`https://wa.me/?text=${encodeURIComponent(window.location.href + '#'+modalTeaching._id)}`, '_blank')}
                  className="flex items-center gap-1 px-3 py-2 rounded-lg bg-green-100 text-green-700 hover:bg-green-200 transition text-sm"
                  aria-label={t('share.whatsapp')}
                >
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20.52 3.48A12.07 12.07 0 0 0 12 0C5.37 0 0 5.37 0 12c0 2.11.55 4.16 1.6 5.97L0 24l6.22-1.62A11.93 11.93 0 0 0 12 24c6.63 0 12-5.37 12-12 0-3.21-1.25-6.23-3.48-8.52zM12 22c-1.85 0-3.67-.5-5.24-1.44l-.37-.22-3.69.96.99-3.59-.24-.37A9.94 9.94 0 0 1 2 12C2 6.48 6.48 2 12 2s10 4.48 10 10-4.48 10-10 10zm5.2-7.6c-.28-.14-1.65-.81-1.9-.9-.25-.09-.43-.14-.61.14-.18.28-.7.9-.86 1.08-.16.18-.32.2-.6.07-.28-.14-1.18-.44-2.25-1.4-.83-.74-1.39-1.65-1.55-1.93-.16-.28-.02-.43.12-.57.13-.13.28-.34.42-.51.14-.17.18-.29.28-.48.09-.19.05-.36-.02-.5-.07-.14-.61-1.47-.84-2.01-.22-.53-.45-.46-.61-.47-.16-.01-.35-.01-.54-.01-.19 0-.5.07-.76.34-.26.27-1 1-.97 2.43.03 1.43 1.03 2.81 1.18 3 .15.19 2.03 3.1 4.93 4.23.69.3 1.23.48 1.65.61.69.22 1.32.19 1.81.12.55-.08 1.65-.67 1.89-1.32.23-.65.23-1.2.16-1.32-.07-.12-.25-.19-.53-.33z"/>
                  </svg>
                  {t('share.whatsapp')}
                </button>
                <button
                  onClick={() => window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(modalTeaching.title + '\n' + window.location.href + '#' + modalTeaching._id)}`, '_blank')}
                  className="flex items-center gap-1 px-3 py-2 rounded-lg bg-blue-100 text-blue-700 hover:bg-blue-200 transition text-sm"
                  aria-label={t('share.twitter')}
                >
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M24 4.56c-.89.39-1.84.65-2.84.77a4.93 4.93 0 0 0 2.16-2.72c-.95.56-2 .97-3.13 1.19A4.92 4.92 0 0 0 16.67 3c-2.72 0-4.93 2.21-4.93 4.93 0 .39.04.77.12 1.13C7.69 8.85 4.07 7.13 1.64 4.15c-.43.74-.68 1.6-.68 2.52 0 1.74.89 3.28 2.25 4.18-.83-.03-1.61-.25-2.29-.63v.06c0 2.43 1.73 4.46 4.03 4.92-.42.12-.87.18-1.33.18-.32 0-.63-.03-.93-.09.63 1.97 2.45 3.4 4.6 3.44A9.87 9.87 0 0 1 0 21.54a13.94 13.94 0 0 0 7.56 2.22c9.05 0 14-7.5 14-14 0-.21 0-.42-.02-.63A9.93 9.93 0 0 0 24 4.56z"/>
                  </svg>
                  {t('share.twitter')}
                </button>
                <button
                  onClick={() => {
                    navigator.clipboard.writeText(window.location.href + '#' + modalTeaching._id);
                    setCopySuccess(t('share.copied'));
                    setTimeout(() => setCopySuccess(''), 2000);
                  }}
                  className="flex items-center gap-1 px-3 py-2 rounded-lg bg-gray-100 text-gray-700 hover:bg-gray-200 transition text-sm"
                  aria-label={t('share.copy')}
                >
                  <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M3.9 12c0-1.16.94-2.1 2.1-2.1h6V7.5H6A4.5 4.5 0 0 0 6 16.5h6v-2.4H6a2.1 2.1 0 0 1-2.1-2.1zm4.5 1.5h6v-3h-6v3zm9.6-7.5h-6v2.4h6a2.1 2.1 0 0 1 2.1 2.1c0 1.16-.94 2.1-2.1 2.1h-6v2.4h6A4.5 4.5 0 0 0 18 7.5z"/>
                  </svg>
                  {t('share.copy')}
                </button>
              </div>

              {/* Comments Section - Visible to Everyone */}
              <div className="border-t border-gray-200 pt-6">
                <h4 className="text-lg font-semibold mb-4 text-blue-900">{t('comments.title')}</h4>
                
                {/* Comments List */}
                <div className="space-y-4 mb-6">
                  {modalTeaching.comments && modalTeaching.comments.length > 0 ? (
                    (commentsExpanded ? modalTeaching.comments : modalTeaching.comments.slice(0, 2)).map((comment, index) => (
                      <div key={comment.userId || index} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="font-semibold text-gray-800">{comment.name}</span>
                              <span className="text-xs text-gray-400">
                                {new Date(comment.date).toLocaleDateString(language)}
                              </span>
                            </div>
                            <p className="text-gray-700">{comment.content}</p>
                          </div>
                          {/* Show delete button for admin or comment author */}
                          {(isAdmin || currentUserComments.has(comment.userId)) && (
                            <button
                              onClick={() => handleDeleteComment(comment.userId)}
                              className="text-red-500 hover:text-red-700 text-sm ml-2"
                              title={isAdmin ? t('comments.delete') : t('comments.delete')}
                            >
                              {t('comments.delete')}
                            </button>
                          )}
                        </div>
                      </div>
                    ))
                  ) : (
                    <p className="text-gray-500 text-center py-4">{t('comments.empty')}</p>
                  )}
                </div>
                {/* Show more/less button */}
                {modalTeaching.comments && modalTeaching.comments.length > 2 && (
                  <button
                    onClick={() => setCommentsExpanded(!commentsExpanded)}
                    className="block mx-auto mt-2 text-blue-700 underline hover:text-blue-900 text-sm"
                  >
                    {commentsExpanded ? t('comments.showLess') : t('comments.showMore')}
                  </button>
                )}

                {/* Comment Form - Available to Everyone */}
                <form onSubmit={handleCommentSubmit} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input
                      type="text"
                      placeholder={t('comments.name')}
                      value={commentForm.name}
                      onChange={(e) => setCommentForm(prev => ({ ...prev, name: e.target.value }))}
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400"
                      required
                    />
                    <input
                      type="email"
                      placeholder={t('comments.email')}
                      value={commentForm.email}
                      onChange={(e) => setCommentForm(prev => ({ ...prev, email: e.target.value }))}
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    />
                  </div>
                  <textarea
                    placeholder={t('comments.content')}
                    value={commentForm.content}
                    onChange={(e) => setCommentForm(prev => ({ ...prev, content: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400 resize-none"
                    rows={3}
                    required
                  />
                  <button
                    type="submit"
                    disabled={commentLoading}
                    className="px-4 py-2 bg-yellow-400 text-white rounded-lg hover:bg-yellow-500 transition disabled:opacity-50"
                  >
                    {commentLoading ? '...' : t('comments.submit')}
                  </button>
                </form>
              </div>
            </div>
          </div>
        )}

        {/* Success Messages */}
        {(copySuccess || commentSuccess) && (
          <div className="fixed left-1/2 top-6 transform -translate-x-1/2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-fade-in-up">
            {copySuccess || commentSuccess}
          </div>
        )}

        {/* Animations */}
        <style jsx global>{`
          .animate-fade-in { animation: fadeIn 0.7s; }
          .animate-fade-in-up { animation: fadeInUp 0.7s; }
          @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
          @keyframes fadeInUp { from { opacity: 0; transform: translateY(40px); } to { opacity: 1; transform: translateY(0); } }
          .group:hover .group-hover\:scale-105 { transform: scale(1.05); }
          .group:active .group-hover\:scale-105 { transform: scale(0.98); }
        `}</style>
      </div>
    );
  }

function TeachingCard({ 
  teaching, 
  featured = false, 
  onReadMore,
  onToggleFavorite,
  onPinToggle,
  onDelete,
  isFavorite,
  isAdmin,
  language
}: { 
  teaching: Teaching; 
  featured?: boolean; 
  onReadMore: (t: Teaching) => void;
  onToggleFavorite: (id: string) => void;
  onPinToggle: (id: string, pinned: boolean) => void;
  onDelete: (id: string) => void;
  isFavorite: boolean;
  isAdmin: boolean;
  language: string;
}) {
  const { t } = useTranslation();

  return (
    <div
      className={`break-inside-avoid rounded-xl shadow-lg bg-white p-6 mb-6 border border-yellow-100 hover:shadow-2xl transition-all duration-300 group relative animate-fade-in-up`}
      tabIndex={0}
      role="button"
      aria-label={`View details for ${teaching.title}`}
      onKeyDown={e => { if (e.key === 'Enter' || e.key === ' ') onReadMore(teaching); }}
    >
      {/* Admin Quick Actions */}
      {isAdmin && (
        <div className="absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
          <button
            onClick={(e) => { e.stopPropagation(); onPinToggle(teaching._id, !!teaching.pinned); }}
            className="p-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition"
            title={teaching.pinned ? t('admin.unpin') : t('admin.pin')}
          >
            <svg width="14" height="14" fill="currentColor" viewBox="0 0 24 24">
              <path d="M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z"/>
            </svg>
          </button>
          <button
            onClick={(e) => { e.stopPropagation(); onDelete(teaching._id); }}
            className="p-1 bg-red-100 text-red-700 rounded hover:bg-red-200 transition"
            title={t('admin.delete')}
          >
            <svg width="14" height="14" fill="currentColor" viewBox="0 0 24 24">
              <path d="M6,19c0,1.1,0.9,2,2,2h8c1.1,0,2-0.9,2-2V7H6V19z M19,4h-3.5l-1-1h-5l-1,1H5v2h14V4z"/>
            </svg>
          </button>
        </div>
      )}

      {/* Favorite Button */}
      <button
        onClick={(e) => { e.stopPropagation(); onToggleFavorite(teaching._id); }}
        className={`absolute top-2 left-2 p-1 rounded transition ${
          isFavorite 
            ? 'bg-yellow-400 text-white' 
            : 'bg-white/80 text-gray-400 hover:text-yellow-500'
        }`}
        title={isFavorite ? t('favorites.remove') : t('favorites.add')}
      >
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
        </svg>
      </button>

      <div onClick={() => onReadMore(teaching)} className="cursor-pointer">
        {teaching.imageUrl && (
          <img src={teaching.imageUrl} alt={teaching.title} className="w-full h-48 object-cover rounded-lg mb-4 group-hover:scale-105 transition-transform duration-300" />
        )}
        
        <div className="flex items-center gap-2 mb-2 flex-wrap">
          <span className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-semibold">
            {teaching.type ? t('types.' + teaching.type) : 'N/A'}
          </span>
          {(teaching.tags && teaching.tags.length > 0 ? teaching.tags : ['N/A']).map(tag => (
            <span key={tag} className="bg-yellow-100 text-yellow-700 px-2 py-1 rounded text-xs font-semibold">
              {t('tags.' + tag) || tag}
            </span>
          ))}
          {(featured || teaching.pinned) && (
            <span className="bg-yellow-400 text-white px-2 py-1 rounded text-xs font-bold ml-auto">
              {t('forum.featured')}
            </span>
          )}
        </div>
        
        <h3 className="text-xl font-bold mb-2 text-gray-800 group-hover:text-yellow-600 transition-colors duration-200">
          {language === 'ar' && teaching.title_ar ? teaching.title_ar : teaching.title}
        </h3>
        <div className="text-xs text-gray-400 mb-2">
          {new Date(teaching.date).toLocaleDateString(language)}
        </div>
        <p className="text-gray-700 whitespace-pre-line mb-2 line-clamp-3">
          {language === 'ar' && teaching.content_ar ? teaching.content_ar : teaching.content}
        </p>
        
        <div className="flex items-center gap-2 mt-2">
          {teaching.authorAvatar ? (
            <img src={teaching.authorAvatar} alt={teaching.author || 'Author'} className="w-7 h-7 rounded-full object-cover" />
          ) : (
            <span className="w-7 h-7 rounded-full bg-gray-200 flex items-center justify-center text-xs text-gray-400">
              N/A
            </span>
          )}
          <span className="text-xs text-gray-500">{t('by')} {language === 'ar' && teaching.author_ar ? teaching.author_ar : teaching.author || 'N/A'}</span>
        </div>
      </div>
    </div>
  );
} 

// Language Toggle Button for Teachings Page
function LanguageToggleButton() {
  const { language, setLanguage } = useLanguage();
  const { t } = useTranslation();

  const toggleLanguage = () => {
    setLanguage(language === 'en' ? 'ar' : 'en');
  };

  return (
    <motion.button
      onClick={toggleLanguage}
      aria-label={t('nav.toggleLanguage') || 'Toggle language'}
      className="bg-white/95 backdrop-blur-sm rounded-full p-3 shadow-lg border border-yellow-500/30 hover:shadow-xl transition-all duration-300 group min-h-[44px] min-w-[44px]"
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center space-x-2 rtl:space-x-reverse">
        <div className="w-8 h-6 rounded-md overflow-hidden border border-gray-300 shadow-sm">
          {language === 'en' ? (
            // Saudi Arabia flag
            <div className="w-full h-full bg-gradient-to-b from-green-600 via-white to-green-600 flex items-center justify-center relative">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-2 h-2 bg-green-600 rounded-full"></div>
              </div>
              <div className="text-xs font-bold text-green-600">🇸🇦</div>
            </div>
          ) : (
            // UK flag
            <div className="w-full h-full bg-gradient-to-br from-blue-600 via-red-600 to-blue-600 flex items-center justify-center">
              <div className="text-xs font-bold text-white">🇬🇧</div>
            </div>
          )}
        </div>
        <span className="text-sm font-medium text-gray-700 group-hover:text-blue-600 transition-colors hidden sm:block">
          {language === 'en' ? 'العربية' : 'English'}
        </span>
      </div>
    </motion.button>
  );
} 